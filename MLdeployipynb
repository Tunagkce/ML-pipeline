{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wpvRZ8-sj741",
        "outputId": "d885ded4-d3c8-4ef2-eee5-b6bff7d9e2e4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (2.0.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.3)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.5.0)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n",
            "Collecting imblearn\n",
            "  Downloading imblearn-0.0-py2.py3-none-any.whl.metadata (355 bytes)\n",
            "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.11/dist-packages (from imblearn) (0.13.0)\n",
            "Requirement already satisfied: numpy<3,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn->imblearn) (2.0.2)\n",
            "Requirement already satisfied: scipy<2,>=1.10.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn->imblearn) (1.15.3)\n",
            "Requirement already satisfied: scikit-learn<2,>=1.3.2 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn->imblearn) (1.6.1)\n",
            "Requirement already satisfied: sklearn-compat<1,>=0.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn->imblearn) (0.1.3)\n",
            "Requirement already satisfied: joblib<2,>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn->imblearn) (1.5.0)\n",
            "Requirement already satisfied: threadpoolctl<4,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn->imblearn) (3.6.0)\n",
            "Downloading imblearn-0.0-py2.py3-none-any.whl (1.9 kB)\n",
            "Installing collected packages: imblearn\n",
            "Successfully installed imblearn-0.0\n"
          ]
        }
      ],
      "source": [
        "!pip install pandas\n",
        "!pip install scikit-learn\n",
        "!pip install numpy\n",
        "!pip install imblearn\n",
        "!pip install seaborn\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.pipeline import Pipeline as ImbPipeline\n",
        "from sklearn.feature_selection import SelectKBest, mutual_info_classif, f_classif\n",
        "from google.colab import files\n"
      ],
      "metadata": {
        "id": "WJlyPXXSkH9z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1.Dataset Analysis\n"
      ],
      "metadata": {
        "id": "TJso_vQ9qsKu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "uploaded=files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "bBHTqnYCkwJY",
        "outputId": "9fb0878c-6fe3-43a8-acf3-03e4d5d44f3e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-0ee6897f-1549-490a-bad0-82b6aacc3377\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-0ee6897f-1549-490a-bad0-82b6aacc3377\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving bank-additional.csv to bank-additional.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"bank-additional.csv\", sep=';')\n",
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O64p6W4EkVpL",
        "outputId": "dcf1bafa-9f8a-46d5-c5de-84c0eb74be12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   age          job  marital          education default  housing     loan  \\\n",
            "0   30  blue-collar  married           basic.9y      no      yes       no   \n",
            "1   39     services   single        high.school      no       no       no   \n",
            "2   25     services  married        high.school      no      yes       no   \n",
            "3   38     services  married           basic.9y      no  unknown  unknown   \n",
            "4   47       admin.  married  university.degree      no      yes       no   \n",
            "\n",
            "     contact month day_of_week  ...  campaign  pdays  previous     poutcome  \\\n",
            "0   cellular   may         fri  ...         2    999         0  nonexistent   \n",
            "1  telephone   may         fri  ...         4    999         0  nonexistent   \n",
            "2  telephone   jun         wed  ...         1    999         0  nonexistent   \n",
            "3  telephone   jun         fri  ...         3    999         0  nonexistent   \n",
            "4   cellular   nov         mon  ...         1    999         0  nonexistent   \n",
            "\n",
            "  emp.var.rate  cons.price.idx  cons.conf.idx  euribor3m  nr.employed   y  \n",
            "0         -1.8          92.893          -46.2      1.313       5099.1  no  \n",
            "1          1.1          93.994          -36.4      4.855       5191.0  no  \n",
            "2          1.4          94.465          -41.8      4.962       5228.1  no  \n",
            "3          1.4          94.465          -41.8      4.959       5228.1  no  \n",
            "4         -0.1          93.200          -42.0      4.191       5195.8  no  \n",
            "\n",
            "[5 rows x 21 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['y'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "TH-oPbfslU60",
        "outputId": "a55d826b-77d7-4fce-f904-62d6d34be6da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "y\n",
              "no     3668\n",
              "yes     451\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>y</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>no</th>\n",
              "      <td>3668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>yes</th>\n",
              "      <td>451</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CUtIcZAvn-OO",
        "outputId": "13dbe685-8423-4cc8-e033-98fe63626bea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4119 entries, 0 to 4118\n",
            "Data columns (total 21 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   age             4119 non-null   int64  \n",
            " 1   job             4119 non-null   object \n",
            " 2   marital         4119 non-null   object \n",
            " 3   education       4119 non-null   object \n",
            " 4   default         4119 non-null   object \n",
            " 5   housing         4119 non-null   object \n",
            " 6   loan            4119 non-null   object \n",
            " 7   contact         4119 non-null   object \n",
            " 8   month           4119 non-null   object \n",
            " 9   day_of_week     4119 non-null   object \n",
            " 10  duration        4119 non-null   int64  \n",
            " 11  campaign        4119 non-null   int64  \n",
            " 12  pdays           4119 non-null   int64  \n",
            " 13  previous        4119 non-null   int64  \n",
            " 14  poutcome        4119 non-null   object \n",
            " 15  emp.var.rate    4119 non-null   float64\n",
            " 16  cons.price.idx  4119 non-null   float64\n",
            " 17  cons.conf.idx   4119 non-null   float64\n",
            " 18  euribor3m       4119 non-null   float64\n",
            " 19  nr.employed     4119 non-null   float64\n",
            " 20  y               4119 non-null   object \n",
            "dtypes: float64(5), int64(5), object(11)\n",
            "memory usage: 675.9+ KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "zGeQbqTYn_jd",
        "outputId": "2cafb5eb-6c1d-4180-b33d-93652b8f2247"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               age     duration     campaign        pdays     previous  \\\n",
              "count  4119.000000  4119.000000  4119.000000  4119.000000  4119.000000   \n",
              "mean     40.113620   256.788055     2.537266   960.422190     0.190337   \n",
              "std      10.313362   254.703736     2.568159   191.922786     0.541788   \n",
              "min      18.000000     0.000000     1.000000     0.000000     0.000000   \n",
              "25%      32.000000   103.000000     1.000000   999.000000     0.000000   \n",
              "50%      38.000000   181.000000     2.000000   999.000000     0.000000   \n",
              "75%      47.000000   317.000000     3.000000   999.000000     0.000000   \n",
              "max      88.000000  3643.000000    35.000000   999.000000     6.000000   \n",
              "\n",
              "       emp.var.rate  cons.price.idx  cons.conf.idx    euribor3m  nr.employed  \n",
              "count   4119.000000     4119.000000    4119.000000  4119.000000  4119.000000  \n",
              "mean       0.084972       93.579704     -40.499102     3.621356  5166.481695  \n",
              "std        1.563114        0.579349       4.594578     1.733591    73.667904  \n",
              "min       -3.400000       92.201000     -50.800000     0.635000  4963.600000  \n",
              "25%       -1.800000       93.075000     -42.700000     1.334000  5099.100000  \n",
              "50%        1.100000       93.749000     -41.800000     4.857000  5191.000000  \n",
              "75%        1.400000       93.994000     -36.400000     4.961000  5228.100000  \n",
              "max        1.400000       94.767000     -26.900000     5.045000  5228.100000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-38b1c24f-f9ea-4fbf-a7ed-117d4bfa7647\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>duration</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>emp.var.rate</th>\n",
              "      <th>cons.price.idx</th>\n",
              "      <th>cons.conf.idx</th>\n",
              "      <th>euribor3m</th>\n",
              "      <th>nr.employed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4119.000000</td>\n",
              "      <td>4119.000000</td>\n",
              "      <td>4119.000000</td>\n",
              "      <td>4119.000000</td>\n",
              "      <td>4119.000000</td>\n",
              "      <td>4119.000000</td>\n",
              "      <td>4119.000000</td>\n",
              "      <td>4119.000000</td>\n",
              "      <td>4119.000000</td>\n",
              "      <td>4119.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>40.113620</td>\n",
              "      <td>256.788055</td>\n",
              "      <td>2.537266</td>\n",
              "      <td>960.422190</td>\n",
              "      <td>0.190337</td>\n",
              "      <td>0.084972</td>\n",
              "      <td>93.579704</td>\n",
              "      <td>-40.499102</td>\n",
              "      <td>3.621356</td>\n",
              "      <td>5166.481695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>10.313362</td>\n",
              "      <td>254.703736</td>\n",
              "      <td>2.568159</td>\n",
              "      <td>191.922786</td>\n",
              "      <td>0.541788</td>\n",
              "      <td>1.563114</td>\n",
              "      <td>0.579349</td>\n",
              "      <td>4.594578</td>\n",
              "      <td>1.733591</td>\n",
              "      <td>73.667904</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-3.400000</td>\n",
              "      <td>92.201000</td>\n",
              "      <td>-50.800000</td>\n",
              "      <td>0.635000</td>\n",
              "      <td>4963.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>32.000000</td>\n",
              "      <td>103.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>999.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-1.800000</td>\n",
              "      <td>93.075000</td>\n",
              "      <td>-42.700000</td>\n",
              "      <td>1.334000</td>\n",
              "      <td>5099.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>38.000000</td>\n",
              "      <td>181.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>999.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.100000</td>\n",
              "      <td>93.749000</td>\n",
              "      <td>-41.800000</td>\n",
              "      <td>4.857000</td>\n",
              "      <td>5191.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>47.000000</td>\n",
              "      <td>317.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>999.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.400000</td>\n",
              "      <td>93.994000</td>\n",
              "      <td>-36.400000</td>\n",
              "      <td>4.961000</td>\n",
              "      <td>5228.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>88.000000</td>\n",
              "      <td>3643.000000</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>999.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.400000</td>\n",
              "      <td>94.767000</td>\n",
              "      <td>-26.900000</td>\n",
              "      <td>5.045000</td>\n",
              "      <td>5228.100000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38b1c24f-f9ea-4fbf-a7ed-117d4bfa7647')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-38b1c24f-f9ea-4fbf-a7ed-117d4bfa7647 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-38b1c24f-f9ea-4fbf-a7ed-117d4bfa7647');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-653ebe99-8bff-4f70-97f3-dd90d11a6394\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-653ebe99-8bff-4f70-97f3-dd90d11a6394')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-653ebe99-8bff-4f70-97f3-dd90d11a6394 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1442.663440584843,\n        \"min\": 10.313361547199822,\n        \"max\": 4119.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          40.11361981063365,\n          38.0,\n          4119.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1718.2926546408369,\n        \"min\": 0.0,\n        \"max\": 4119.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          256.7880553532411,\n          181.0,\n          4119.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"campaign\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1453.953218497157,\n        \"min\": 1.0,\n        \"max\": 4119.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4119.0,\n          2.537266326778344,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pdays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1263.8913705723114,\n        \"min\": 0.0,\n        \"max\": 4119.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          960.4221898519058,\n          999.0,\n          191.9227858007736\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"previous\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1455.9478568492361,\n        \"min\": 0.0,\n        \"max\": 4119.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.19033746054867687,\n          6.0,\n          0.5417883234290218\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emp.var.rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1456.269931723342,\n        \"min\": -3.4,\n        \"max\": 4119.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4119.0,\n          0.08497208060208788,\n          1.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cons.price.idx\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1428.2747426919952,\n        \"min\": 0.5793488049889657,\n        \"max\": 4119.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          93.57970429715951,\n          93.749,\n          4119.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cons.conf.idx\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1468.2282271845525,\n        \"min\": -50.8,\n        \"max\": 4119.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -40.49910172371935,\n          -41.8,\n          4119.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"euribor3m\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1455.1668677113134,\n        \"min\": 0.635,\n        \"max\": 4119.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.621355668851663,\n          4.857,\n          4119.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nr.employed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1780.249865523628,\n        \"min\": 73.66790355721277,\n        \"max\": 5228.1,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4119.0,\n          5166.481694586065,\n          5191.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 742
        },
        "id": "mri0M1uAoFvZ",
        "outputId": "2d621db5-ecf8-4315-abc7-7d2d5e850d01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "age               0\n",
              "job               0\n",
              "marital           0\n",
              "education         0\n",
              "default           0\n",
              "housing           0\n",
              "loan              0\n",
              "contact           0\n",
              "month             0\n",
              "day_of_week       0\n",
              "duration          0\n",
              "campaign          0\n",
              "pdays             0\n",
              "previous          0\n",
              "poutcome          0\n",
              "emp.var.rate      0\n",
              "cons.price.idx    0\n",
              "cons.conf.idx     0\n",
              "euribor3m         0\n",
              "nr.employed       0\n",
              "y                 0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>job</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>marital</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>education</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>default</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>housing</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>loan</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>contact</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>month</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>day_of_week</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>campaign</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pdays</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>previous</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>poutcome</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>emp.var.rate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cons.price.idx</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cons.conf.idx</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>euribor3m</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nr.employed</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>y</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. Data Cleaning\n"
      ],
      "metadata": {
        "id": "bGO_tS-loOwV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"y\"].describe()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "VfJqo3m8oUPo",
        "outputId": "b1d0b620-59e7-4b32-a864-5b0bb0ea8ab2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count     4119\n",
              "unique       2\n",
              "top         no\n",
              "freq      3668\n",
              "Name: y, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>3668</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"y\"].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "0LBUOKFkoddB",
        "outputId": "cf45ee3e-598c-420c-d8b9-53b060376ea7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "y\n",
              "no     3668\n",
              "yes     451\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>y</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>no</th>\n",
              "      <td>3668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>yes</th>\n",
              "      <td>451</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import warnings\n",
        "%matplotlib inline\n",
        "warnings.filterwarnings('ignore')"
      ],
      "metadata": {
        "id": "M2TflX3aozhc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x = df[\"y\"], palette = \"Spectral\")\n",
        "plt.title(\"Output Distribution\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "56maeA16odVu",
        "outputId": "9546f76c-b758-48cb-81d7-35709f6f1bcd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n Columns containing 'unknown' values:\")\n",
        "for col in df.select_dtypes(include='object').columns:\n",
        "    unknown_count = df[col].value_counts().get('unknown', 0)\n",
        "    if unknown_count > 0:\n",
        "        print(f\"→ {col}: {unknown_count} instances of 'unknown'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9myqx5YPqYbb",
        "outputId": "0d76aacb-5364-4197-fbb8-396be8d950b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Columns containing 'unknown' values:\n",
            "→ job: 39 instances of 'unknown'\n",
            "→ marital: 11 instances of 'unknown'\n",
            "→ education: 167 instances of 'unknown'\n",
            "→ default: 803 instances of 'unknown'\n",
            "→ housing: 105 instances of 'unknown'\n",
            "→ loan: 105 instances of 'unknown'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n number of values in default column:\")\n",
        "print(df['default'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eKEt7DcQqb0Z",
        "outputId": "20039752-0a34-44c8-a026-2e90d0b10fdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " number of values in default column:\n",
            "default\n",
            "no         3315\n",
            "unknown     803\n",
            "yes           1\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned = df.drop('default', axis=1)\n",
        "\n",
        "print(\" 'default' column has been deleted. cleaned dataset :\", df_cleaned.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WPI-UYgZqgEO",
        "outputId": "5f1701dc-d19f-46d4-f6ca-6b3b1c379715"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " 'default' column has been deleted. cleaned dataset : (4119, 20)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "columns_with_unknown = ['job', 'marital', 'education', 'housing', 'loan']\n",
        "\n",
        "for col in columns_with_unknown:\n",
        "    mode_value = df_cleaned[col].mode()[0]  # En sık geçen değeri al(mod)\n",
        "    df_cleaned[col] = df_cleaned[col].replace('unknown', mode_value)\n",
        "\n",
        "print(\" 'unknown' values in selected columns have been replaced with the mode value.\")\n",
        "print(\" Columns affected:\", columns_with_unknown)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qXEgpsiWqmjT",
        "outputId": "1b7a9479-4b1b-409b-edd4-85436a19fd08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " 'unknown' values in selected columns have been replaced with the mode value.\n",
            " Columns affected: ['job', 'marital', 'education', 'housing', 'loan']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. Preprocessing\n"
      ],
      "metadata": {
        "id": "T3cK-EdZsRRj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned['y'] = df_cleaned['y'].map({'yes': 1, 'no': 0})"
      ],
      "metadata": {
        "id": "aLMsY5KmsRBt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_cleaned.drop('y', axis=1)\n",
        "y = df_cleaned['y']"
      ],
      "metadata": {
        "id": "B6M0lfpGrcXx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "categorical_cols = X.select_dtypes(include='object').columns.tolist()\n",
        "numeric_cols = X.select_dtypes(exclude='object').columns.tolist()\n"
      ],
      "metadata": {
        "id": "1jT6QDvpsX40"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', StandardScaler(), numeric_cols),  # Ölçekleme (StandardScaler) mean=0, std=1 yapar\n",
        "        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)  # Kategorikleri encode eder\n",
        "    ]\n",
        ")"
      ],
      "metadata": {
        "id": "fgw-00_fsZ1O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, stratify=y, test_size=0.2, random_state=42\n",
        ")"
      ],
      "metadata": {
        "id": "-DuZ7SKzsdFU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "smote_pipeline = ImbPipeline(steps=[\n",
        "    ('preprocessing', preprocessor),\n",
        "    ('smote', SMOTE(random_state=42))\n",
        "])"
      ],
      "metadata": {
        "id": "5kvB5cmEsg7R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_resampled, y_train_resampled = smote_pipeline.fit_resample(X_train, y_train)"
      ],
      "metadata": {
        "id": "b5NYdWNasiyS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Preprocessing complete.\")\n",
        "print(\"Resampled training target distribution:\")\n",
        "print(pd.Series(y_train_resampled).value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zlyJTL4RskzW",
        "outputId": "a0febca4-5e7c-4536-d7e7-be0c34d96e2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Preprocessing complete.\n",
            "Resampled training target distribution:\n",
            "y\n",
            "1    2934\n",
            "0    2934\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test_transformed = smote_pipeline.named_steps['preprocessing'].transform(X_test)"
      ],
      "metadata": {
        "id": "w9JAUjqlsqID"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n First 10 rows of X_train_resampled:\")\n",
        "print(pd.DataFrame(X_train_resampled).head(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PUwBK0_XssuJ",
        "outputId": "9d02f179-25d0-498f-815c-8ebdc6526ed9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " First 10 rows of X_train_resampled:\n",
            "         0         1         2        3         4         5         6   \\\n",
            "0  0.753520  3.137154  0.191474  0.20669 -0.363291 -1.191328 -1.170168   \n",
            "1 -0.596326  0.439116 -0.202105  0.20669  1.426013 -1.191328 -1.170168   \n",
            "2  0.657102 -0.378471 -0.595684  0.20669 -0.363291 -1.191328 -1.170168   \n",
            "3  1.042773 -0.039756  0.191474  0.20669 -0.363291  0.849013 -0.224400   \n",
            "4 -1.078413 -0.429084 -0.595684  0.20669 -0.363291 -1.191328 -1.170168   \n",
            "5 -0.981996  0.006963 -0.202105  0.20669  1.426013 -0.107397 -0.643215   \n",
            "6  0.078597  0.143228 -0.202105  0.20669 -0.363291  0.657731  0.719651   \n",
            "7  0.271432 -0.697719 -0.595684  0.20669 -0.363291  0.657731  0.719651   \n",
            "8  0.657102 -0.429084  1.765791  0.20669 -0.363291  0.849013 -0.224400   \n",
            "9 -0.403491 -0.643214 -0.202105  0.20669 -0.363291  0.849013 -0.224400   \n",
            "\n",
            "         7         8         9   ...   45   46   47   48   49   50   51   52  \\\n",
            "0 -1.251261 -1.333391 -0.895014  ...  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0   \n",
            "1 -1.251261 -1.302893 -0.895014  ...  0.0  0.0  0.0  0.0  0.0  1.0  0.0  1.0   \n",
            "2 -1.251261 -1.308647 -0.895014  ...  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0   \n",
            "3  0.929473  0.779600  0.841761  ...  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0   \n",
            "4 -1.251261 -1.339145 -0.895014  ...  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0   \n",
            "5 -0.344421  0.237542  0.406894  ...  0.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0   \n",
            "6  0.864699  0.718604  0.342270  ...  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0   \n",
            "7  0.864699  0.718604  0.342270  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0   \n",
            "8  0.929473  0.780751  0.841761  ...  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0   \n",
            "9  0.929473  0.779600  0.841761  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0   \n",
            "\n",
            "    53   54  \n",
            "0  1.0  0.0  \n",
            "1  0.0  0.0  \n",
            "2  1.0  0.0  \n",
            "3  1.0  0.0  \n",
            "4  1.0  0.0  \n",
            "5  0.0  0.0  \n",
            "6  1.0  0.0  \n",
            "7  1.0  0.0  \n",
            "8  1.0  0.0  \n",
            "9  1.0  0.0  \n",
            "\n",
            "[10 rows x 55 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n First 10 rows of X_test_transformed:\")\n",
        "print(pd.DataFrame(X_test_transformed).head(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pM4Duz5Rs2pC",
        "outputId": "aef3b50d-c353-4e78-c299-87499441a98a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " First 10 rows of X_test_transformed:\n",
            "         0         1         2         3         4         5         6   \\\n",
            "0  0.078597  0.606527 -0.595684  0.206690  1.426013 -1.191328 -0.857772   \n",
            "1 -1.560501 -0.760012  0.191474  0.206690 -0.363291 -1.191328 -1.170168   \n",
            "2 -0.885578 -0.214954 -0.202105  0.206690 -0.363291  0.849013 -0.224400   \n",
            "3 -0.692743 -0.456336 -0.202105  0.206690 -0.363291  0.657731  0.719651   \n",
            "4 -0.210656 -0.211060  0.191474  0.206690  1.426013 -1.191328 -1.170168   \n",
            "5 -0.596326 -0.214954 -0.202105 -4.837105  1.426013 -0.107397 -0.643215   \n",
            "6 -1.078413  0.707752 -0.595684  0.206690 -0.363291  0.849013  0.589200   \n",
            "7  0.946355 -0.413510  0.978633  0.206690 -0.363291  0.849013  0.589200   \n",
            "8  0.271432 -0.148768  0.191474  0.206690 -0.363291  0.657731  0.719651   \n",
            "9 -0.596326 -0.580921 -0.595684  0.206690 -0.363291  0.849013 -0.224400   \n",
            "\n",
            "         7         8         9   ...   45   46   47   48   49   50   51   52  \\\n",
            "0 -1.445584 -1.267792 -0.895014  ...  0.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0   \n",
            "1 -1.251261 -1.360436 -0.895014  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0   \n",
            "2  0.929473  0.781326  0.841761  ...  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0   \n",
            "3  0.864699  0.720330  0.342270  ...  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0   \n",
            "4 -1.251261 -1.360436 -0.895014  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0   \n",
            "5 -0.344421  0.294510  0.406894  ...  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0   \n",
            "6 -0.495561  0.779600  0.841761  ...  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0   \n",
            "7 -0.495561  0.779024  0.841761  ...  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0   \n",
            "8  0.864699  0.719755  0.342270  ...  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0   \n",
            "9  0.929473  0.780175  0.841761  ...  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0   \n",
            "\n",
            "    53   54  \n",
            "0  0.0  0.0  \n",
            "1  1.0  0.0  \n",
            "2  1.0  0.0  \n",
            "3  1.0  0.0  \n",
            "4  0.0  0.0  \n",
            "5  0.0  1.0  \n",
            "6  1.0  0.0  \n",
            "7  1.0  0.0  \n",
            "8  1.0  0.0  \n",
            "9  1.0  0.0  \n",
            "\n",
            "[10 rows x 55 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\" class distrubution (SMOTE sonrası):\")\n",
        "print(pd.Series(y_train_resampled).value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c5yegejAs5K7",
        "outputId": "92b316b4-bbb8-4fd0-9317-7d42dc01a578"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " class distrubution (SMOTE sonrası):\n",
            "y\n",
            "1    2934\n",
            "0    2934\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Oranları da görelim\n",
        "print(\"\\n class rate (%):\")\n",
        "print(pd.Series(y_train_resampled).value_counts(normalize=True) * 100)\n",
        "# 0: 50.0% (2000), 1: 50.0% (2000) şeklinde çıktı alırız yani sınıf dengesizliği giderildi."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JUBGCgSjs8TN",
        "outputId": "4c954369-63a9-4979-a97f-a2913dc85917"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " class rate (%):\n",
            "y\n",
            "1    50.0\n",
            "0    50.0\n",
            "Name: proportion, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(16,6))\n",
        "sns.heatmap(df.select_dtypes(include='number').corr(), annot=True, cmap='coolwarm')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 528
        },
        "id": "P7vszd2a0Z9s",
        "outputId": "eb4ac221-f35e-4dcf-e076-5104f430e8f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4. Feature Selection"
      ],
      "metadata": {
        "id": "NpNOaGr8uUgB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Neden feature selection yapıyoruz?\n",
        "#OneHotEncoder sonrası sütun sayısı arttı (55 oldu)\n",
        "#Hepsi model için anlamlı olmayabilir\n",
        "#Biz en bilgilendirici olanları seçmek istiyoruz → bu hem performans artırır, hem hız kazandırır(K tane özellik seçeceğiz)\n",
        "\n",
        "#mutual_info_classif: Her bir özelliğin hedef değişkenle olan bilgi bağımlılığını hesaplar.\n",
        "selector = SelectKBest(score_func=mutual_info_classif, k=20)\n",
        "X_train_selected = selector.fit_transform(X_train_resampled, y_train_resampled)\n",
        "X_test_selected = selector.transform(X_test_transformed)\n",
        "print(\"Feature selection completed.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iv_mZhHluY7V",
        "outputId": "dca19033-09e7-4beb-934b-3907cc08cfa8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature selection completed.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Eğitim verisinin şekli (özellik sayısı 20 olmalı)\n",
        "print(\"\\n X_train_selected shape:\", X_train_selected.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E_vUqcqqume0",
        "outputId": "984c8cff-3aa9-4b3b-8b95-c0643986d805"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " X_train_selected shape: (5868, 20)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Test verisinin şekli (özellik sayısı 20 olmalı)\n",
        "print(\" X_test_selected shape:\", X_test_selected.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_R3F6V0cupeh",
        "outputId": "a29d2bcf-2b45-49f3-b580-7f121a99ea02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " X_test_selected shape: (824, 20)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# SMOTE sonrası sınıf dağılımı (beklenen: 50/50)\n",
        "print(\"\\n Class distribution after SMOTE:\")\n",
        "print(y_train_resampled.value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HJTUBAJXu429",
        "outputId": "7e422c54-a159-429c-c5f4-91e84a2f3b41"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Class distribution after SMOTE:\n",
            "y\n",
            "1    2934\n",
            "0    2934\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n Class proportion (%):\")\n",
        "print(y_train_resampled.value_counts(normalize=True) * 100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iXBghyu-u6rC",
        "outputId": "52e72a3a-4d33-4c3f-fe08-07331c389688"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Class proportion (%):\n",
            "y\n",
            "1    50.0\n",
            "0    50.0\n",
            "Name: proportion, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n First 5 rows of X_train_selected:\")\n",
        "print(pd.DataFrame(X_train_selected).head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H2zgC4uju8cU",
        "outputId": "f198e4d2-2202-4405-d4f3-d365be82f2ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " First 5 rows of X_train_selected:\n",
            "         0         1         2         3         4         5         6   \\\n",
            "0  0.753520  3.137154  0.191474 -1.191328 -1.170168 -1.251261 -1.333391   \n",
            "1 -0.596326  0.439116 -0.202105 -1.191328 -1.170168 -1.251261 -1.302893   \n",
            "2  0.657102 -0.378471 -0.595684 -1.191328 -1.170168 -1.251261 -1.308647   \n",
            "3  1.042773 -0.039756  0.191474  0.849013 -0.224400  0.929473  0.779600   \n",
            "4 -1.078413 -0.429084 -0.595684 -1.191328 -1.170168 -1.251261 -1.339145   \n",
            "\n",
            "         7    8    9    10   11   12   13   14   15   16   17   18   19  \n",
            "0 -0.895014  1.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0  \n",
            "1 -0.895014  0.0  1.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  \n",
            "2 -0.895014  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  1.0  \n",
            "3  0.841761  0.0  1.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0  \n",
            "4 -0.895014  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n First 5 rows of X_test_selected:\")\n",
        "print(pd.DataFrame(X_test_selected).head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bQdcwy4gvA55",
        "outputId": "ccdd7c98-a34e-41e1-e8c4-60370125ee81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " First 5 rows of X_test_selected:\n",
            "         0         1         2         3         4         5         6   \\\n",
            "0  0.078597  0.606527 -0.595684 -1.191328 -0.857772 -1.445584 -1.267792   \n",
            "1 -1.560501 -0.760012  0.191474 -1.191328 -1.170168 -1.251261 -1.360436   \n",
            "2 -0.885578 -0.214954 -0.202105  0.849013 -0.224400  0.929473  0.781326   \n",
            "3 -0.692743 -0.456336 -0.202105  0.657731  0.719651  0.864699  0.720330   \n",
            "4 -0.210656 -0.211060  0.191474 -1.191328 -1.170168 -1.251261 -1.360436   \n",
            "\n",
            "         7    8    9    10   11   12   13   14   15   16   17   18   19  \n",
            "0 -0.895014  0.0  1.0  0.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  0.0  0.0  \n",
            "1 -0.895014  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  0.0  \n",
            "2  0.841761  0.0  1.0  0.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0  \n",
            "3  0.342270  1.0  1.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0  \n",
            "4 -0.895014  0.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  0.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "feature_names = preprocessor.get_feature_names_out()\n",
        "selected_features = feature_names[selector.get_support()]\n",
        "print(\"Selected Features:\", selected_features)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rf89V6Pe3fVK",
        "outputId": "14b7dd84-95b3-4b5e-bcd0-6007cb608da3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Selected Features: ['num__age' 'num__duration' 'num__campaign' 'num__emp.var.rate'\n",
            " 'num__cons.price.idx' 'num__cons.conf.idx' 'num__euribor3m'\n",
            " 'num__nr.employed' 'cat__job_admin.' 'cat__marital_married'\n",
            " 'cat__education_high.school' 'cat__education_professional.course'\n",
            " 'cat__education_university.degree' 'cat__housing_no' 'cat__housing_yes'\n",
            " 'cat__day_of_week_fri' 'cat__day_of_week_mon' 'cat__day_of_week_thu'\n",
            " 'cat__day_of_week_tue' 'cat__day_of_week_wed']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "scores = selector.scores_[selector.get_support()]\n",
        "plt.barh(selected_features, scores, color='red')\n",
        "plt.title(\"Top 15 Features (Filter Method - ANOVA F-Value)\")\n",
        "plt.xlabel(\"F-Value Score\")\n",
        "plt.ylabel(\"Features\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "9DEaUDYP3Use",
        "outputId": "5fc112b4-d741-47cd-cb3e-21e76bfff36a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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M4A7bx4HgJycHHh7e8PY2Fjep2fPnlptnDhxAmlpaTAzM5NTp06dAKDSFKt7RUVFQa1Wy6mwsLDe/SEiIqKmiS/RI6ojQ0NDrW1JkqDRaKCnd2fMLoSQy27fvv3ANiRJqrbN+ho6dCicnJywevVq2NvbQ6PRoEuXLrh169ZDt1FaWoqhQ4figw8+qFRmZ2dX7X4KhQIKhaJOcRMREVHzwsEFkY5ZW1sDAIqKiuDj4wMAWouiH7VLly4hJycHq1evRv/+/QEAP/30k1adjh074l//+hfKysrkgcCRI0e06nTv3h1btmyBs7MzDAz4q4OIiIgq47QoIh1TKpXo3bs3EhISkJ2djX379mH27NmNFk+rVq3QunVrfPbZZzh79iz++9//4t1339WqExoaCo1Gg/HjxyM7OxupqalYtGgRgDt3TwDgrbfewuXLlzFixAgcOXIEubm5SE1Nxeuvv46KiopH3i8iIiJqeji4IGoAa9asQXl5OXx9fTFt2jTMnz+/0WLR09PDpk2b8PPPP6NLly545513sHDhQq06KpUK3333HTIzM9GtWzfMmjULc+bMAQB5HYa9vT0yMjJQUVGBp59+Gl5eXpg2bRosLS3lqWBERET0eJPEvRPDiYj+v/Xr1+P111+HWq2GUqnUWbslJSWwsLCAGoBKZ60SERERGvBrvfz5rVZDpar+E5wTp4kIALBu3Tq4uLigXbt2OHHiBCIjIxEcHKzTgYUWtRqo4ZcTERERNT8cXBA1AwUFBfD09Kyy7O4bvE1MTKosz8rKgqOj4wOPcf78ecyZMwfnz5+HnZ0dXnnlFSxYsKDuQRMREdFjh9OiiJqB8vJy5Ofn12nfpvZ0p4e9rUpERERNB6dFEbUgBgYGcHV1bewwiIiIiGrER7wQEREREZFOcHBBREREREQ6wcEFERERERHpBAcXRERERESkExxcEBERERGRTnBwQUREREREOsHBBRERERER6QQHF0REREREpBMcXBARERERkU5wcEFERERERDrBwQUREREREekEBxdERERERKQTBo0dABE9XoQQAICSkpJGjoSIiIge1t3P7buf49Xh4IKIHqlLly4BABwcHBo5EiIiIqqta9euwcLCotpyDi6I6JGysrICABQUFNT4y6m5KikpgYODAwoLC6FSqRo7HJ1j/5q/lt5H9q95Y/+aLiEErl27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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5. Model Selection"
      ],
      "metadata": {
        "id": "H8_lFEv2vXOB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report, roc_auc_score, mean_squared_error\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "QYQ24y48vKkq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "models = {\n",
        "    \"Logistic Regression\": LogisticRegression(max_iter=500),\n",
        "    \"Decision Tree\": DecisionTreeClassifier(random_state=42),\n",
        "    \"Random Forest\": RandomForestClassifier(random_state=42)\n",
        "}"
      ],
      "metadata": {
        "id": "ZNu-xfcAveFV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for name, model in models.items():\n",
        "    # Build a pipeline with preprocessing, SMOTE, feature selection, and classifier\n",
        "    pipeline = ImbPipeline(steps=[\n",
        "        ('preprocessor', preprocessor),  # Scaling + Encoding\n",
        "        ('smote', SMOTE(random_state=42)),  # Handle imbalance\n",
        "        ('feature_selector', SelectKBest(score_func=f_classif, k=20)),  # Feature selection\n",
        "        ('classifier', model)  # ML model\n",
        "    ])\n",
        "\n",
        "    # Train the pipeline on original X_train/y_train (pipeline handles resampling + preprocessing)\n",
        "    pipeline.fit(X_train, y_train)\n",
        "\n",
        "    # Predict on original X_test (which is untouched)\n",
        "    y_pred = pipeline.predict(X_test)\n",
        "    y_proba = pipeline.predict_proba(X_test)[:, 1]\n",
        "\n",
        "    # Evaluation\n",
        "    train_score = pipeline.score(X_train, y_train)\n",
        "    test_score = pipeline.score(X_test, y_test)\n",
        "    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "    auc = roc_auc_score(y_test, y_proba)\n",
        "\n",
        "    print(f\"Model: {name}\")\n",
        "    print(f\"Training Score: {train_score:.3f}\")\n",
        "    print(f\"Test Score: {test_score:.3f}\")\n",
        "    print(f\"RMSE: {rmse:.3f}\")\n",
        "    print(f\"ROC-AUC: {auc:.3f}\")\n",
        "    print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n",
        "    print(\"-\" * 50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HUTVVlnTvs49",
        "outputId": "9d6b6268-2bdd-431a-def5-7d5315da2d92"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: Logistic Regression\n",
            "Training Score: 0.866\n",
            "Test Score: 0.876\n",
            "RMSE: 0.352\n",
            "ROC-AUC: 0.944\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      0.88      0.93       734\n",
            "           1       0.46      0.84      0.60        90\n",
            "\n",
            "    accuracy                           0.88       824\n",
            "   macro avg       0.72      0.86      0.76       824\n",
            "weighted avg       0.92      0.88      0.89       824\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Decision Tree\n",
            "Training Score: 1.000\n",
            "Test Score: 0.890\n",
            "RMSE: 0.332\n",
            "ROC-AUC: 0.758\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      0.93      0.94       734\n",
            "           1       0.50      0.59      0.54        90\n",
            "\n",
            "    accuracy                           0.89       824\n",
            "   macro avg       0.72      0.76      0.74       824\n",
            "weighted avg       0.90      0.89      0.89       824\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Random Forest\n",
            "Training Score: 1.000\n",
            "Test Score: 0.908\n",
            "RMSE: 0.304\n",
            "ROC-AUC: 0.933\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      0.95      0.95       734\n",
            "           1       0.58      0.56      0.57        90\n",
            "\n",
            "    accuracy                           0.91       824\n",
            "   macro avg       0.76      0.75      0.76       824\n",
            "weighted avg       0.91      0.91      0.91       824\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Choosing the Final Model From the examples in the above table:\n",
        "\n",
        "Random Forest has the high ROC-AUC (0.933) and a lowest RMSE (0.304). Random Forest performs satisfactorily on training and test scores to reflect no significant overfitting. It has a good solid F1-score (0.95) for subscribed class, so it is suitable for an imbalanced classification task. That is why Random Forest would be the final model."
      ],
      "metadata": {
        "id": "AqoMACZBy8i5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 6. Hyperparameter Tuning using GridSearchCV"
      ],
      "metadata": {
        "id": "5w02POyE6V65"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import confusion_matrix\n"
      ],
      "metadata": {
        "id": "ZsrUVF5nvwJf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define hyperparameter grid for Random Forest\n",
        "rf_param_grid = {\n",
        "    'classifier__n_estimators': [50, 100, 150],\n",
        "    'classifier__max_depth': [None, 10, 20, 30],\n",
        "    'classifier__min_samples_split': [2, 5, 10],\n",
        "    'classifier__min_samples_leaf': [1, 2, 4]\n",
        "}\n",
        "\n",
        "# Define the full pipeline with SMOTE and feature selection\n",
        "tuned_rf_pipeline = ImbPipeline(steps=[\n",
        "    ('preprocessor', preprocessor),  # scaling + encoding\n",
        "    ('smote', SMOTE(random_state=42)),  # resampling handled inside pipeline\n",
        "    ('feature_selector', SelectKBest(score_func=f_classif, k=20)),  # select top 20 features\n",
        "    ('classifier', RandomForestClassifier(random_state=42))  # Random Forest model\n",
        "])\n",
        "\n"
      ],
      "metadata": {
        "id": "QTDpIIwBvwvA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf_grid_search = GridSearchCV(\n",
        "    tuned_rf_pipeline,\n",
        "    param_grid=rf_param_grid,\n",
        "    cv=3,\n",
        "    scoring='roc_auc',\n",
        "    verbose=2\n",
        ")\n",
        "# Fit the grid search on the ORIGINAL (unresampled) train set\n",
        "rf_grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Best model and parameters\n",
        "print(\"Best Parameters for Random Forest:\", rf_grid_search.best_params_)\n",
        "best_rf_pipeline = rf_grid_search.best_estimator_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p709D-586tUZ",
        "outputId": "fd4a9698-8529-492b-9057-0e450af03413"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 108 candidates, totalling 324 fits\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.7s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.8s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   1.0s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   3.0s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   2.2s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   1.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   2.1s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.7s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.8s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   1.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   1.1s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.2s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.0s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   1.1s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   1.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.5s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.5s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.5s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.7s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=None, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.7s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   1.1s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.2s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.2s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.0s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   1.2s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.5s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   1.0s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=10, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.7s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.5s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.0s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   1.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   1.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   1.2s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   1.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   1.1s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   1.1s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.8s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.7s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   1.2s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   1.1s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.5s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.5s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.5s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   1.0s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.5s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.5s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.7s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.8s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   1.1s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=20, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.7s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   1.2s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   1.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=1, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   1.1s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   1.2s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   1.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.5s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=2, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=2, classifier__n_estimators=150; total time=   1.0s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.5s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=50; total time=   0.4s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=5, classifier__n_estimators=150; total time=   0.8s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=50; total time=   0.3s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=100; total time=   0.6s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "[CV] END classifier__max_depth=30, classifier__min_samples_leaf=4, classifier__min_samples_split=10, classifier__n_estimators=150; total time=   0.9s\n",
            "Best Parameters for Random Forest: {'classifier__max_depth': None, 'classifier__min_samples_leaf': 4, 'classifier__min_samples_split': 10, 'classifier__n_estimators': 150}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 7. Evaluation\n"
      ],
      "metadata": {
        "id": "N8yTWQC-CiU-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Predict using the best Random Forest model\n",
        "y_pred_rf = best_rf_pipeline.predict(X_test)\n",
        "y_proba_rf = best_rf_pipeline.predict_proba(X_test)[:, 1]\n",
        "\n",
        "# Metrics\n",
        "print(\"Classification Report:\\n\", classification_report(y_test, y_pred_rf))\n",
        "print(\"ROC-AUC Score:\", roc_auc_score(y_test, y_proba_rf))\n",
        "print(\"RMSE:\", np.sqrt(mean_squared_error(y_test, y_pred_rf)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KqRbl1jeCgU8",
        "outputId": "2fd10b9d-3532-4d64-ad96-2fcb6ba2c2f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.93      0.95       734\n",
            "           1       0.57      0.73      0.64        90\n",
            "\n",
            "    accuracy                           0.91       824\n",
            "   macro avg       0.77      0.83      0.79       824\n",
            "weighted avg       0.92      0.91      0.92       824\n",
            "\n",
            "ROC-AUC Score: 0.9432788374205268\n",
            "RMSE: 0.2996762006611777\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Confusion Matrix\n",
        "conf_matrix_rf = confusion_matrix(y_test, y_pred_rf)\n",
        "sns.heatmap(conf_matrix_rf, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"Confusion Matrix - Random Forest\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "n44fbU7ODAbG",
        "outputId": "053cc44d-33d3-4d71-bdea-16a77af60bb6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ROC Curve\n",
        "from sklearn.metrics import roc_curve\n",
        "fpr_rf, tpr_rf, thresholds_rf = roc_curve(y_test, y_proba_rf)\n",
        "plt.plot(fpr_rf, tpr_rf, label=f\"ROC Curve (AUC = {roc_auc_score(y_test, y_proba_rf):.2f})\")\n",
        "plt.plot([0, 1], [0, 1], 'k--', label=\"Random Guess\")\n",
        "plt.xlabel(\"False Positive Rate\")\n",
        "plt.ylabel(\"True Positive Rate\")\n",
        "plt.title(\"ROC Curve - Random Forest\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "aaRERRQWDDo6",
        "outputId": "50b626e4-2c7b-42ce-9596-451a9fb974ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Finalize the pipeline with the best Random Forest model\n",
        "final_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('feature_selector', SelectKBest(score_func=f_classif, k=15)),\n",
        "    ('classifier', best_rf_pipeline.named_steps['classifier'])\n",
        "])\n",
        "\n",
        "# Fit the finalized pipeline on the entire training data\n",
        "final_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Test the pipeline on unseen data\n",
        "final_predictions = final_pipeline.predict(X_test)\n",
        "final_probabilities = final_pipeline.predict_proba(X_test)[:, 1]\n",
        "\n",
        "print(\"Final Model Performance\")\n",
        "print(\"Classification Report:\\n\", classification_report(y_test, final_predictions))\n",
        "print(\"ROC-AUC Score:\", roc_auc_score(y_test, final_probabilities))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OsHAAuFJDNlY",
        "outputId": "e7c85681-7fb6-4c72-e475-59748fd6af50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final Model Performance\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      0.98      0.95       734\n",
            "           1       0.70      0.41      0.52        90\n",
            "\n",
            "    accuracy                           0.92       824\n",
            "   macro avg       0.81      0.69      0.74       824\n",
            "weighted avg       0.91      0.92      0.91       824\n",
            "\n",
            "ROC-AUC Score: 0.9421359370269452\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "preprocessor = final_pipeline.named_steps['preprocessor']\n",
        "feature_selector = final_pipeline.named_steps['feature_selector']\n",
        "classifier = final_pipeline.named_steps['classifier']\n",
        "\n",
        "# feature names after preprocessing (OneHotEncoder and StandardScaler)\n",
        "feature_names_all = preprocessor.get_feature_names_out()\n",
        "\n",
        "# Selected features from SelectKBest\n",
        "selected_feature_indices = feature_selector.get_support(indices=True)\n",
        "\n",
        "\n",
        "selected_feature_names = feature_names_all[selected_feature_indices]\n",
        "\n",
        "# feature importances from the RF\n",
        "feature_importance = classifier.feature_importances_\n",
        "\n",
        "# Create df for feature importances\n",
        "importance_df = pd.DataFrame({\n",
        "    'Feature': selected_feature_names,\n",
        "    'Importance': feature_importance\n",
        "}).sort_values(by='Importance', ascending=False)\n",
        "\n",
        "\n",
        "print(\"Feature Importance:\\n\", importance_df)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(data=importance_df, x='Importance', y='Feature', palette='viridis')\n",
        "plt.title('Top Feature Importances (Random Forest)')\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 921
        },
        "id": "ehUC8wlbDkul",
        "outputId": "f0c109a5-e605-4b68-a664-3bad8da4b0bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature Importance:\n",
            "                       Feature  Importance\n",
            "0               num__duration    0.449902\n",
            "4              num__euribor3m    0.184862\n",
            "5            num__nr.employed    0.129979\n",
            "1                  num__pdays    0.061024\n",
            "3           num__emp.var.rate    0.050216\n",
            "14      cat__poutcome_success    0.040454\n",
            "2               num__previous    0.024339\n",
            "9              cat__month_mar    0.011397\n",
            "13  cat__poutcome_nonexistent    0.010456\n",
            "6       cat__contact_cellular    0.009231\n",
            "10             cat__month_may    0.008942\n",
            "7      cat__contact_telephone    0.008141\n",
            "12             cat__month_sep    0.004887\n",
            "11             cat__month_oct    0.004239\n",
            "8              cat__month_dec    0.001932\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "import pickle\n",
        "\n",
        "\n",
        "deployment_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('feature_selector', SelectKBest(score_func=f_classif, k=15)),\n",
        "    ('classifier', best_rf_pipeline.named_steps['classifier'])\n",
        "])\n",
        "\n",
        "\n",
        "deployment_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Saving for deployment\n",
        "with open('bank_marketing_pipeline.sav', 'wb') as f:\n",
        "    pickle.dump(deployment_pipeline, f)"
      ],
      "metadata": {
        "id": "MOBbgmUPFOfP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 222
        },
        "outputId": "1c90ec93-07b8-49d3-85d3-3e5a6549fc11"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'preprocessor' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-5e99504739ac>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m deployment_pipeline = Pipeline(steps=[\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0;34m(\u001b[0m\u001b[0;34m'preprocessor'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpreprocessor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0;34m(\u001b[0m\u001b[0;34m'feature_selector'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSelectKBest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscore_func\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mf_classif\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;34m(\u001b[0m\u001b[0;34m'classifier'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbest_rf_pipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnamed_steps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'classifier'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'preprocessor' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "files.download('bank_marketing_pipeline.sav')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "UroVerskKaSZ",
        "outputId": "e72d31a3-c03e-401b-e6ed-b7b5b147e42c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_7d20ca17-718d-445c-89ec-c631f13d4de2\", \"bank_marketing_pipeline.sav\", 2188445)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "VtSxNmQWu7DH"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
